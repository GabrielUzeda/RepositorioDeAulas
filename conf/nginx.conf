worker_processes auto;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 100M;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss;

    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # HTTP - listen and serve ACME challenge, redirect other traffic to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name uzeda.ddns.net;

        # Serve Let's Encrypt / Certbot challenges from this folder
        location ^~ /.well-known/acme-challenge/ {
            root /usr/share/nginx/certification;
            # prevent logging noise for challenge requests
            access_log off;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        server_name efg.uzedasolucoes.com.br;
        location / {
            proxy_pass https://uzedasolucoes/efg;
        }
    }

    # HTTPS - use certificates provided by Certbot (Let's Encrypt)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name uzeda.ddns.net;

        ssl_certificate /etc/letsencrypt/live/uzedasolucoes/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/uzedasolucoes/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Proxy API calls to Rust backend
        location ~ ^/(api|send-mail|auth|turmas) {
            proxy_pass http://rust-server:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
        }

        location / {
            try_files $uri $uri/ =404;
        }

        location ~* /(\.git|\.env|\.htaccess) {
            deny all;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff2)$ {
            expires 365d;
            add_header Cache-Control "public, no-transform";
        }

        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
